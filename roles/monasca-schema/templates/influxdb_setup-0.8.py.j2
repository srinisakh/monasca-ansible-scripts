#!/usr/bin/env python
"""A simple script to setup influxdb user and roles. At some point this should become a more full featured module.
   Also this assumes that none of the python based influxdb clients are available on this system.
"""

ADMIN='{{influxdb_admin}}'
ADMIN_PASS='{{influxdb_admin_password}}'
DBNAME='{{influxdb_dbname}}'
USERS={{influxdb_users}}
URL='{{influxdb_url}}'

SHARDSPACE_NAME='persister_all'
REPLICATION={{influxdb_replication_factor}}
RETENTION='{{influxdb_retention_policy}}'
DURATION='{{influxdb_shard_duration}}'

import json
import sys
import time
import urllib2

def influxdb_query_names(url):
    """ Runs a query via an http GET and returns the names in a response as a Python list. """
    try:
      json_value = json.loads(urllib2.urlopen(url).read())
    except urllib2.URLError:
      time.sleep(15)  # Unfortunately influxdb often takes awhile to come up
      json_value = json.loads(urllib2.urlopen(url).read())

    if len(json_value) > 0:
        return [ item['name'] for item in json_value if item.has_key('name')]
    else:
        return []

def influxdb_post(url, data):
    """ Performs a post request against the url with the given data. """
    req = urllib2.Request(url, json.dumps(data))
    return urllib2.urlopen(req)

def main(argv=None):
    auth_str = '?u=%s&p=%s' % (ADMIN, ADMIN_PASS)

    #List current databases
    dbs = influxdb_query_names(URL + '/db' + auth_str)
    if DBNAME not in dbs:
        influxdb_post(URL + '/db' + auth_str, {"name": DBNAME})
    #List current shard spaces
    shardspaces = influxdb_query_names(URL + '/cluster/shard_spaces' + auth_str)
    if SHARDSPACE_NAME not in shardspaces:
        # we could pass in a config file for the data when we want more shards
        influxdb_post(URL + '/cluster/shard_spaces/' + DBNAME + auth_str, 
            {"name":SHARDSPACE_NAME, "retentionPolicy": RETENTION, "shardDuration": DURATION, "regex":"/.*/", "replicationFactor": REPLICATION, "split":1})

    # Create the users
    users = influxdb_query_names(URL + '/db/' + DBNAME + '/users' + auth_str)
    for name, password in USERS.iteritems():
        if name not in users:
            influxdb_post(unicode(URL + '/db/' + DBNAME + '/users' + auth_str, 'utf-8'), {"name": name, "password": password})

if __name__ == "__main__":
    sys.exit(main())
